"*************************************************************************
" Description: My VIM configuration for Linux/Windows, Console/GUI
" Author: He Wei Ping (hwp195)
" Create: 2012年03月12日
" Last Modified: 星期一 2018年04月23日 22:02:10
" Modified Times:
"*************************************************************************

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" 配置Vundle -[Vim] 插件管理器
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim "Run time path

call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'fatih/vim-go'
call vundle#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"        Key Mapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map ,e :e ~/.vim/vimrc<CR>
map ,ma :!man
map ,bn :bn<CR>
map ,bd :bd<CR>
map ,bl :%s/\s\+$//<CR> "Delect Extra spaces in the end of each line
iab xdate <c-r>=strftime("%Y-%m-%d %H:%M:%S")<CR>
nmap <C-K> :!sdcv <C-R>=expand("<cword>")<CR>
map ,bu :BufExplorer<CR>
map ,fm <ESC>gg=G

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" 设置代码折叠
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nofoldenable           " 设置成打开文件时就打开所有可折叠地方
set foldmethod=syntax       " 设置语法折叠
set foldcolumn=0            " 设置折叠区域的宽度
setlocal foldlevel=1        " 设置折叠层数为
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

"保存上次浏览光标位置
autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif
"Auto imports packages on save
autocmd BufWritePre *.go :GoImports 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
">>>>>>>>>>>>>>>>>>>>>>   My configuration   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
colorscheme  desert
syntax on
set autoindent
set cindent                 " Enables automatic C program indenting.
set cinoptions=:s,ps,ts,cs
set cinwords=if,else,while,do,for,switch,case
set scrolloff=3             " Scrolloff
set nocompatible            " No Vi-compatibl
set autoread                " Auto reload file when be changed outside
set autowriteall            " Auto write when change buffer
set wildmenu                " Auto match the command line your input by <Tab>
set cursorline              " Highlight the screen line of the cursor with CursorLin
set number                  " Display line number
set showcmd		    " Show the current command in the lower right corner
set mouse=h                 " Enable full mouse support in the console.
set mousehide               " Hiden the mouse when inserting mode
set fillchars=""            " Get rid of the silly characters in window separators
set cpoptions+=$            " Have nice $ sign when you use `cw`
set nobackup                " Do not make a backup before overwriting a file.
set shiftwidth=4            " Number of spaces to use for each step of (auto)indent.
set hidden                  " 允许在有未保存的修改时切换缓冲区，此时的修改由vim负责保存
set ignorecase smartcase    " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set nowrapscan              " 禁止在搜索到文件两端时循环搜索
set incsearch               " 边输入搜索内容时就自动跳到匹配字符串处
set hlsearch                " 搜索时高亮显示被找到的文本
set magic                   " 设置当命令行里有正则表达式符号时需要用转义符\标示
set guioptions-=T           " 隐藏工具栏
set guioptions-=m           " 隐藏菜单栏
set cmdheight=1             " 设定命令行的行数为 1
set wrap                    " 自动换行
set linebreak               " 整词换行，英文单词在换行时不被截断
set clipboard+=unnamed      " Yanks go on clipboard instead.
set textwidth=0		    " Don't wrap lines by default
set wildmode=longest,list   " At command line, complete longest common string, then list alternatives.
set backspace=indent,eol,start	" more powerful backspacing

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" Set statusline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Display status line(default 1)
" The flow lines must be set behind "colorscheme" command,
" because colorscheme cmmand will be execute "hi clear".
set laststatus=2
function! InsertStatuslineColor(mode)
    if     a:mode == 'i'
	hi statusline guibg=DarkRed  ctermbg=DarkRed
    elseif a:mode == 'r'
	hi statusline guibg=Black    ctermbg=Black
    else
	hi statusline guibg=DarkBlue ctermbg=DarkBlue
    endif
endfunction
hi User1 guifg=DarkMagenta ctermfg=DarkMagenta
hi User2 guifg=Yellow  guibg=Blue    ctermfg=Yellow ctermbg=Blue
au InsertEnter * call  InsertStatuslineColor(v:insertmode)
au InsertChange * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi statusline guibg=Black guifg=Green ctermbg=Black ctermfg=LightGreen
set stl=[%F]\ %2*%n%m%r%h%w%*\ [FORMAT=%{&ff}:%{&fenc!=''?&fenc:&enc}]\ [TYPE=%Y]\ [COL=%v]\ [ROW=%l/%L(%p%%)]\ [ASCII:0x%B=%b]\ %1*[%{strftime(\"%H:%M:%S\")}]%*


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""" Functions
function MySys()
    if has("win32")
	return "windows"
    else
	return "linux"
    endif
endfunction

function AutoFormat()
    if has("win32")
	return "windows"
    else
	return "linux"
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""设置用户目录变量　VIMFILES
if MySys() == "windows"
    let $VIMFILES = $VIM.'/vimfiles'
elseif MySys() == "linux"
    let $VIMFILES = $HOME.'/.vim'
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""设置字体
if has("win32")
	set guifont=Inconsolata:h12:cANSI
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""配置多语言环境
if has("multi_byte")
    set fileencodings=ucs-bom,utf-8,cp936     " 打开文件时会根据fileencodings选项来识别文件编码
    set fileencoding=utf-8                    " 保存新建文件时会根据fileencoding的设置编码来保存
    set encoding=utf-8                        " Vim的内部使用编码
    set termencoding=utf-8                    " Vim终端所使用的编码
    set formatoptions+=mM
    set fencs=utf-8,gb2312,gb18030,ucs-bom,cp936,gbk

    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
	set ambiwidth=double
    endif

    if has("win32")
	source $VIMRUNTIME/delmenu.vim
	source $VIMRUNTIME/menu.vim
	language messages zh_CN.utf-8
    endif
else
    echoerr "Sorry :( , this version of (g)vim was not compiled with multi_byte"
endif


"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
"                   Plugins' setting                                     !
"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
filetype on
filetype indent on
filetype plugin on


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"    plugin - taglist.vim + winmanager.vim                               "
"------------------------------------------------------------------------"
"taglist can works with WManager
let Tlist_Auto_Highlight_Tag = 1
let Tlist_Auto_Update = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Sort_Type = "name"
let Tlist_Inc_Winwidth = 1
"let Tlist_WinWidth = 20

map ,tl	:TlistToggle<CR>
set tags=./tags;$HOME
set autochdir

if MySys() == "windows"
    let Tlist_Ctags_Cmd = '"'.$VIMRUNTIME.'/ctags.exe"'
elseif MySys() == "linux"
    let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"    plugin -srcexpl.vim                                                 "
"------------------------------------------------------------------------"
nmap <F4> :SrcExplToggle<CR>

" Set the height of Source Explorer window
let g:SrcExpl_winHeight = 8

" Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 25

" Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"

" Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

let g:SrcExpl_pluginList = ["__Tag_List__","_NERD_tree_","Source_Explorer"]

" Enable/Disable the local definition searching, and note that this is not
" guaranteed to work, the Source Explorer doesn't check the syntax for now.
" It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1

" Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
"  create/update a tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."

" Set "<F5>" key for updating the tags file artificially
let g:SrcExpl_updateTagsKey = "<F5>"



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"    plugin -winmanager.vim
"------------------------------------------------------------------------"
map ,wm :WMToggle<CR>
let g:winManagerWindowLayout = 'FileExplorer|TagList|BufExplorer'
let g:persistentBehaviour    = 1   "close vim when the last closed
let g:persistentBehaviour    = 1   "quit the vim when quit all files
let g:winManagerWidth        = 25  "default is 25
let g:defaultExplorer        = 1
nmap <C-w><C-k> :FirstExplorerWindow<cr>   " 切换到左上方窗格
nmap <C-w><C-j> :BottomExplorerWindow<cr>  " 切换到左下方窗格


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"    plugin -C.Vim                                                       "
"------------------------------------------------------------------------"
let g:C_Comments                       ="yes"
let g:C_BraceOnNewLine                 ="yes"
let g:C_TypeOfH                        ="c"
let g:C_MapLeader                      =','
let g:C_UseTool_doxygen                ='yes'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"    plugin -DoxygenToolkit.vim                                          "
"------------------------------------------------------------------------"
let g:DoxygenToolkit_briefTag_pre      ="@brief:  "
let g:DoxygenToolkit_paramTag_pre      ="@param:  "
let g:DoxygenToolkit_returnTag         ="@returns:"
let g:DoxygenToolkit_licenseTag        ="Copyright (C) Infogo Technology LimitedCompany"
let g:DoxygenToolkit_briefTag_funcName ="yes"
let g:doxygen_enhanced_color           =1
let g:load_doxygen_syntax              =1
map <F12> <Esc>:Dox<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"    plugin -go.Vim                                                      "
"------------------------------------------------------------------------"
let g:go_version_warning = 0
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_experimental = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" plugin -emmet.vim:  HTML, CSS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Emmet is a plugin  which greatly improves HTML & CSS 
set omnifunc=csscomplete#CompleteCSS
set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" plugin -NERDTree.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map ,nt :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 20
let NERDTreeMinimalUI = 1  
let NERDTreeDirArrows = 0



autocmd BufWritePre,FileWritePre *vimrc   ks|call LastMod()|'s
fun LastMod()
    if line("$") > 8
	let l = 8
    else
	let l = line("$")
    endif
    exe "1," . l . "g/Last Modified: /s/Last Modified: .*/Last Modified: " .
            \ strftime("%A %x %H:%M:%S")
endfun
"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
">>>>>>>>>>>>>>>>>>>>      End Of Vimrc     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
